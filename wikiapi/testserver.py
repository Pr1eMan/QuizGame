#!/usr/bin/env python3

# Ported to Python 3 by Telmo "Trooper" (telmo.trooper@gmail.com)
# 
# Original code from:
# http://www.piware.de/2011/01/creating-an-https-server-in-python/
# https://gist.github.com/dergachev/7028596
# 
# To generate a certificate use:
# openssl req -new -x509 -keyout server.pem -out server.pem -days 365 -nodes

from http.server import HTTPServer, BaseHTTPRequestHandler
import ssl
from urllib.parse import urlparse
from urllib.parse import parse_qs
import wikipediaapi
import re
import random
import json
from re import search
class SimpleHTTPRequestHandler(BaseHTTPRequestHandler):

    def do_GET(self):
        self.send_response(200)
       # self.end_headers()
        topic = ''
        formatas=''
        jsonas=''
        query_components = parse_qs(urlparse(self.path).query)
        if 'topic' in query_components:
            topic = query_components["topic"][0]
        if 'formatas' in query_components:
            formatas = query_components["formatas"][0]
        html=''
        if(formatas=="json"):
            self.send_header("Content-type", "application/json")
            self.end_headers()
        else:
            self.send_header("Content-type", "text/html")
            self.end_headers()
        
        # Some custom HTML code, possibly generated by another function
        if(formatas!="json"):
            html='<html><head><meta charset="UTF-8"></head><body>'
            html += "<h1>Wikipedia Quiz Game Api</h1>"
        if(formatas=="json"):
            html += '{ "quiz": ['
        
        aa = None
        if(topic != ''):
            if(formatas!="json"):
                html+= "Pasirinkta tema: {}<br/>".format(topic)
            wiki_wiki = wikipediaapi.Wikipedia('en')
            page_py = wiki_wiki.page(topic)
            if(page_py.exists()): # jei yra toks psl 
                print(page_py.summary.split('. '))
                #print(page_py.summary)
                for x in page_py.summary.split('. '):
                    #match = re.search('since', x)
                    if search("\d+", x):
                        #print ("Found!")
                        skaiciai=re.findall(r'\d+', x)
                        if len(skaiciai) >0:                            
                            klausimas=""
                            for dalis in x.split(skaiciai[0]):
                                if(dalis == x.split(skaiciai[0])[0]):
                                    klausimas=klausimas+dalis+"____"
                                else:
                                    klausimas+=dalis
                            if(formatas!="json"):
                                html+= "<br/>Klausimas: {}<br/>".format(klausimas)
                            teisingas_atsakymas=skaiciai[0]
                            if(formatas!="json"):
                                html+= "Teisingas atsakymas: {}<br/>".format(teisingas_atsakymas)
                            #print(int(teisingas_atsakymas)-100)
                            if(int(teisingas_atsakymas)<100):
                                atsakymas1=abs(random.randint(int(int(teisingas_atsakymas)-50),int(int(teisingas_atsakymas)+50)))
                                atsakymas2=abs(random.randint(int(int(teisingas_atsakymas)-50),int(int(teisingas_atsakymas)+50)))
                            else:
                                atsakymas1=random.randint(int(int(teisingas_atsakymas)*0.9),int(int(teisingas_atsakymas)*1.1))
                                atsakymas2=random.randint(int(int(teisingas_atsakymas)*0.8),int(int(teisingas_atsakymas)*1.2))
                            if atsakymas1 == teisingas_atsakymas or atsakymas1 == atsakymas2:
                                atsakymas1==random.randint(10)
                            if atsakymas2== teisingas_atsakymas or atsakymas2 == atsakymas1:
                                atsakymas2==random.randint(10)
                            #atsakymu_variantai=str(teisingas_atsakymas)+" "+atsakymas1
                            if(formatas!="json"):
                                html+= "Galimi atsakymu variantai: {} {} {}<br/>".format(teisingas_atsakymas,atsakymas1,atsakymas2)
                            else:
                                aa = {
                                  "question": klausimas,
                                  "correct_answer": teisingas_atsakymas,
                                  #"answers": str(atsakymas1
                                  "answers": [int(teisingas_atsakymas),atsakymas1,atsakymas2]
                                }
                    if(aa !=None):
                        y = json.dumps(aa)
                        jsonas=jsonas+""+y+","  
                        aa=None
        else:
            html+= "Nepasirinkta tema!"
        # Writing the HTML contents with UTF-8
        if(formatas=="json"):
            jsonas=jsonas[:-1]
            html=html+jsonas+"]}"
        #html += </body></html>"
        self.wfile.write(bytes(html, "utf8"))

        return
separator = "-" * 80

httpd = HTTPServer(("itoaze.lt", 4443), SimpleHTTPRequestHandler)
httpd.socket = ssl.wrap_socket(httpd.socket, certfile='/var/www/html/wikiapi/fullchain.pem', keyfile="/var/www/html/wikiapi/privkey.pem", server_side=True)

print(separator)
print("Server running on https://localhost:4443")
print(separator)

httpd.serve_forever()