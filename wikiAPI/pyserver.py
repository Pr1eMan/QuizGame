# naudojimas http://localhost:8000/?topic=Lancia&formatas=json json isprintinimui
# naudojimas http://localhost:8000/?topic=Lancia humand readable isprintinimui
import http.server
import socketserver
from urllib.parse import urlparse
from urllib.parse import parse_qs
import wikipediaapi
import re
import random
import json
from re import search
def obj_dict(obj):
    return obj.__dict__
class MyHttpRequestHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        # Sending an '200 OK' response
        self.send_response(200)

        # Setting the header
        

        # Extract query param
        topic = ''
        formatas=''
        jsonas=''
        query_components = parse_qs(urlparse(self.path).query)
        if 'topic' in query_components:
            topic = query_components["topic"][0]
        if 'formatas' in query_components:
            formatas = query_components["formatas"][0]
        html=''
        if(formatas=="json"):
            self.send_header("Content-type", "application/json")
            self.end_headers()
        else:
            self.send_header("Content-type", "text/html")
            self.end_headers()
        #html=f"<html><head></head><body>"
        # Some custom HTML code, possibly generated by another function
        if(formatas!="json"):
            html += f"<h1>Wikipedia Quiz Game Api</h1>"
        if(formatas=="json"):
            html += '{ "quiz": ['
        
        aa = None
        if(topic != ''):
            if(formatas!="json"):
                html+= f"Pasirinkta tema: {topic}<br/>"
            wiki_wiki = wikipediaapi.Wikipedia('en')
            page_py = wiki_wiki.page(topic)
            if(page_py.exists()): # jei yra toks psl 
                #print(page_py.summary.split('. '))
                for x in page_py.summary.split('. '):
                    #match = re.search('since', x)
                    if search("in", x):
                        #print ("Found!")
                        skaiciai=re.findall(r'\d+', x)
                        if len(skaiciai) >0:
                            
                            klausimas=""
                            for dalis in x.split(skaiciai[0]):
                                if(dalis == x.split(skaiciai[0])[0]):
                                    klausimas=klausimas+dalis+"xxxx"
                                else:
                                    klausimas+=dalis
                            if(formatas!="json"):
                                html+= f"<br/>Klausimas: {klausimas}<br/>"
                            teisingas_atsakymas=skaiciai[0]
                            if(formatas!="json"):
                                html+= f"Teisingas atsakymas: {teisingas_atsakymas}<br/>"
                            #print(int(teisingas_atsakymas)-100)
                            atsakymas1=random.randint(int(int(teisingas_atsakymas)*0.9),int(int(teisingas_atsakymas)*1.1))
                            atsakymas2=random.randint(int(int(teisingas_atsakymas)*0.8),int(int(teisingas_atsakymas)*1.2))
                            #atsakymu_variantai=str(teisingas_atsakymas)+" "+atsakymas1
                            if(formatas!="json"):
                                html+= f"Galimi atsakymu variantai: {teisingas_atsakymas} {atsakymas1} {atsakymas2}<br/>"
                            else:
                                aa = {
                                  "question": klausimas,
                                  "correct_answer": teisingas_atsakymas,
                                  "answers": [teisingas_atsakymas,atsakymas1,atsakymas2]
                                }
                    if(aa !=None):
                        y = json.dumps(aa)
                        jsonas=jsonas+""+y+","  
                        aa=None
        else:
            html+= f"Nepasirinkta tema!"
        # Writing the HTML contents with UTF-8
        if(formatas=="json"):
            jsonas=jsonas[:-1]
            html=html+jsonas+"]}"
        #html += f"</body></html>"
        self.wfile.write(bytes(html, "utf8"))

        return

# Create an object of the above class
handler_object = MyHttpRequestHandler

PORT = 8000
my_server = socketserver.TCPServer(("", PORT), handler_object)

# Star the server
my_server.serve_forever()